// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ganganbiz1/go-echo-gorm-template/app/domain/repository (interfaces: IfUserRepository)
//
// Generated by this command:
//
//	mockgen -destination=../domain/repository/mock/user_repository.go github.com/ganganbiz1/go-echo-gorm-template/app/domain/repository IfUserRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/ganganbiz1/go-echo-gorm-template/app/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIfUserRepository is a mock of IfUserRepository interface.
type MockIfUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIfUserRepositoryMockRecorder
}

// MockIfUserRepositoryMockRecorder is the mock recorder for MockIfUserRepository.
type MockIfUserRepositoryMockRecorder struct {
	mock *MockIfUserRepository
}

// NewMockIfUserRepository creates a new mock instance.
func NewMockIfUserRepository(ctrl *gomock.Controller) *MockIfUserRepository {
	mock := &MockIfUserRepository{ctrl: ctrl}
	mock.recorder = &MockIfUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIfUserRepository) EXPECT() *MockIfUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIfUserRepository) Create(arg0 context.Context, arg1 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIfUserRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIfUserRepository)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockIfUserRepository) Get(arg0 context.Context, arg1 int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIfUserRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIfUserRepository)(nil).Get), arg0, arg1)
}
